//## ----------------------------           HANDLER EROR           -----------------------------------------------

const errorHandler = (errorResponse) => {
	// console.log('üöÄ ~ NAME ~ err:', err.name);
	// console.log('üöÄ ~ error.ERRORSSSSSSS : ', err.errors);
	// console.log(
	// 	'üöÄ ~ error.ERRORSSSSSSS PROPRIETES : ',
	// 	err.errors.properties
	// );

	if (errorResponse.name === 'ValidationError') {
		const infoReponse =
			'les donn√©es non conformes aux r√®gles du sch√©ma Mongoose';

		console.log('üöÄ ~ errorHandler ~ infoReponse:', infoReponse);
	}

	if (errorResponse.name === 'CastError') {
		const infoReponse =
			'Mongoose ne peut pas convertir une valeur pour correspondre au type d√©fini dans le sch√©ma.';
		console.log('üöÄ ~ errorHandler ~ infoReponse:', infoReponse);
	}

	if (errorResponse.name === 'MongoServerError') {
		const infoReponse =
			'Cette erreur est une erreur g√©n√©rale qui englobe plusieurs erreurs sp√©cifiques √† MongoDB qui ne sont pas couvertes par les erreurs ci-dessus.';
		console.log('üöÄ ~ errorHandler ~ infoReponse:', infoReponse);
	}

	// const ObjectZERO = Object(err);
	// console.log('üöÄ ~  ~ ObjectZERO:', ObjectZERO, typeof ObjectZERO);
	// const ObjectErrONE = Object.values(err);
	// console.log(
	// 	'üöÄ ~ errorHandler ~ ObjectErrONE:',
	// 	ObjectErrONE,
	// 	'LONG => ',
	// 	ObjectErrONE.length
	// );
	// const ObjectErrTWO = Object.values(err.errors);
	// console.log(
	// 	'üöÄ ~ errorHandler ~ ObjectErrTWO:',
	// 	ObjectErrTWO,
	// 	'LONG => ',
	// 	ObjectErrTWO.length
	// );
	// const errorNb = ObjectErrTWO.length;
	// console.log('üöÄ ~ errorHandler ~ errorNb:', errorNb);

	// const errorArray = [];

	// const Error = {};

	// const Error = [];

	// ObjectErrTWO.forEach((oneProp) => {
	// 	console.log('üöÄ ~ ObjectErr.forEach ~ oneProp:', oneProp);

	// 	for (let i = 0; i <= errorNb; i++) {
	// 		errorArray.push(oneProp);
	// 	}

	// 	const itemProp = oneProp.properties;

	// 	console.log('üöÄ ~ ObjectErr.forEach itemProp ', itemProp);

	// 	Error.message = itemProp.message || undefined;
	// 	Error.type = itemProp.type || undefined;
	// 	Error.path = itemProp.path || undefined;
	// });

	// console.log('üöÄ ~  Error :', Error);

	// console.log('üöÄ ~  ~ errorArray:', errorArray);

	// return Error;
};

module.exports = errorHandler;

//##Propri√©t√©s :
// ??  --- 1. ValidationError
// Les erreurs de validation surviennent lorsque les donn√©es ne respectent pas les r√®gles de validation d√©finies dans le sch√©ma Mongoose.

// name: 'ValidationError'
// errors: Un objet contenant les erreurs sp√©cifiques pour chaque champ.

// if (error.name === 'ValidationError') {
// 	const messages = Object.values(error.errors).map((val) => val.message);
// 	return res
// 		.status(400)
// 		.json({message: 'Validation Error', errors: messages});
//}

//??  --- 3. CastError
// Cette erreur se produit lorsque Mongoose ne peut pas convertir une valeur pour correspondre au type d√©fini dans le sch√©ma.

// Propri√©t√©s :

// name: 'CastError'
// path: Le champ qui a caus√© l'erreur.
// value: La valeur qui a caus√© l'erreur.
// if (error.name === 'CastError') {
// 	return res
// 		.status(400)
// 		.json({message: `Cast Error: Invalid ${error.path}: ${error.value}`});
//}

//?? ---- 4. MongoError ... attention c'est : MongoServerError
// Cette erreur est une erreur g√©n√©rale qui englobe plusieurs erreurs sp√©cifiques √† MongoDB qui ne sont pas couvertes par les erreurs ci-dessus.

// Propri√©t√©s :

// name: 'MongoError'
// code: Code sp√©cifique de l'erreur MongoDB.
// if (error.name === 'MongoError') {
// 	return res.status(500).json({message: 'MongoDB Error', error});
// }

//  if (err.name === 'ValidationError') {
//       console.error('Erreur de validation:');
//       for (let field in err.errors) {
//         let error = err.errors[field];
//         console.error(`- Champ: ${field}`);
//         console.error(`  Message: ${error.message}`);
//         console.error(`  Type: ${error.kind}`);
//         console.error(`  Valeur fournie: ${error.value}`);
//         if (error.properties) {
//           console.error(`  Propri√©t√©s:`);
//           console.error(`    Message: ${error.properties.message}`);
//           console.error(`    Type: ${error.properties.type}`);
//           console.error(`    Path: ${error.properties.path}`);
//           console.error(`    Valeur: ${error.properties.value}`);
//         }
//         if (error.reason) {
//           console.error(`  Raison: ${error.reason.message}`);
//         }

// Structure de l'objet d'erreur d√©taill√©e
// err : L'objet d'erreur principal.
// 	name : Le nom de l'erreur, typiquement ValidationError.
// 	errors : Un objet contenant les erreurs pour chaque champ.
// 		<field> : Le nom du champ qui a √©chou√© √† la validation.
// 				message : Un message d√©crivant l'erreur.
// 				name : Le type d'erreur (ValidatorError ou CastError).
// 				kind : Le type de validation qui a √©chou√© (required, min, etc.).
// 				path : Le chemin du champ dans le document.
// 				value : La valeur fournie qui a caus√© l'erreur.
// 				reason : (optionnelle) Une sous-erreur, souvent pr√©sente pour les CastError.
